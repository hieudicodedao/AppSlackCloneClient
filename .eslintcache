[{"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/App.js":"1","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Login/Index.js":"2","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/index.js":"3","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Register/Index.js":"4","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main/Index.js":"5","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Channel/Index.js":"6","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Status/Index.js":"7","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Topic/Index.js":"8","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/TopicPost/Index.js":"9","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Thread/Index.js":"10","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Sub-Thread/Index.js":"11","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Sub-Channel/Index.js":"12","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Config/Index.js":"13","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/API/index.js":"14","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/WrapMain/Index.js":"15","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Config/refractorDate.js":"16"},{"size":510,"mtime":1609688307034,"results":"17","hashOfConfig":"18"},{"size":4844,"mtime":1611731770103,"results":"19","hashOfConfig":"18"},{"size":189,"mtime":1609393395195,"results":"20","hashOfConfig":"18"},{"size":8049,"mtime":1611731830082,"results":"21","hashOfConfig":"18"},{"size":12087,"mtime":1613358869452,"results":"22","hashOfConfig":"18"},{"size":608,"mtime":1611732172820,"results":"23","hashOfConfig":"18"},{"size":460,"mtime":1609774106552,"results":"24","hashOfConfig":"18"},{"size":3757,"mtime":1611732639689,"results":"25","hashOfConfig":"18"},{"size":2652,"mtime":1611732310007,"results":"26","hashOfConfig":"18"},{"size":1710,"mtime":1611737103407,"results":"27","hashOfConfig":"18"},{"size":1015,"mtime":1611732265724,"results":"28","hashOfConfig":"18"},{"size":366,"mtime":1611732248924,"results":"29","hashOfConfig":"18"},{"size":1134,"mtime":1613323630353,"results":"30","hashOfConfig":"18"},{"size":313,"mtime":1609516718954,"results":"31","hashOfConfig":"18"},{"size":1029,"mtime":1609595674969,"results":"32","hashOfConfig":"18"},{"size":1311,"mtime":1609775976084,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rzjb30",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/App.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Login/Index.js",[],["74","75"],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/index.js",[],["76","77"],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Register/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main/Index.js",["78"],"import React, { useState, useEffect } from 'react'\nimport io from 'socket.io-client'\n//\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Backdrop from '@material-ui/core/Backdrop'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n//\nimport Channel from '../Main-Channel/Index'\nimport Status from '../Main-Status/Index'\nimport Topic from '../Main-Topic/Index'\nimport Thread from '../Main-Thread/Index'\nimport {\n\tURL_SERVER,\n\tCREATE_CHANNEL,\n\tGET_LIST_CHANNEL,\n\tCREATE_TOPIC,\n\tGET_LIST_TOPIC,\n\tGET_LIST_REPLY,\n\tADD_REPLY,\n\tPUSH_REPLY_TO_TOPIC,\n\tUPLOAD_TO_CLOUD,\n} from '../../Config/Index'\nimport { FETCH_POST, FETCH_GET } from '../../API/index'\n//\nimport './index.css'\n// import { lightGreen } from '@material-ui/core/colors'\n//\nlet socket\n//\nfunction Alert(props) {\n\treturn <MuiAlert elevation={6} variant='filled' {...props} />\n}\n\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\twidth: '100%',\n\t\t'& > * + *': {\n\t\t\tmarginTop: theme.spacing(2),\n\t\t},\n\t},\n\tbackdrop: {\n\t\tzIndex: theme.zIndex.drawer + 1,\n\t\tcolor: '#fff',\n\t},\n}))\n\n//\nconst Index = (props) => {\n\tconst { username } = props\n\tconst classes = useStyles()\n\t//\n\n\t//\n\tconst [openBackDrop, setOpenBackDrop] = React.useState(false)\n\tconst [openDialog, setOpenDialog] = React.useState(false)\n\tconst [openDialogTopic, setOpenDialogTopic] = React.useState(false)\n\tconst [openSnack, setOpenSnack] = React.useState(false)\n\t//\n\tconst [topic_content_2, setTopic_content_2] = useState('')\n\tconst [isOpenThread, setIsOpenThread] = useState(false)\n\tconst [idtopic, setIdtopic] = useState('')\n\tconst [listreply, setListreply] = useState([])\n\tconst [topic_content, setTopic_content] = useState('')\n\tconst [reply_content, setReply_content] = useState('')\n\tconst [listtopic, setListtopic] = useState([])\n\tconst [listchannel, setListchannel] = useState([])\n\tconst [current_channel, setCurrent_channel] = useState('')\n\tconst [current_topic, setCurrent_topic] = useState('')\n\tconst [channel_name, setChanel_name] = useState('')\n\tconst [isAddSuccess, setIsAddSuccess] = useState(false)\n\tconst [url, setUrl] = useState(URL_SERVER)\n\t//\n\t//\n\tconst loadChannelFromDB = async () => {\n\t\tawait FETCH_GET(GET_LIST_CHANNEL)\n\t\t\t.then((res) => res.json())\n\t\t\t.then(\n\t\t\t\t(rs) => {\n\t\t\t\t\tconst newList = []\n\t\t\t\t\tconst listchannelDB = rs.listchannel\n\t\t\t\t\tlistchannelDB.map((channel) =>\n\t\t\t\t\t\tnewList.push({ name: channel.name, isJoin: false }),\n\t\t\t\t\t)\n\t\t\t\t\tsetListchannel(newList)\n\t\t\t\t},\n\t\t\t\t(err) => {},\n\t\t\t)\n\t\t\t.catch((error) => console.log(error))\n\t}\n\t// socket add channel\n\n\tuseEffect(() => {\n\t\tsocket = io(url)\n\t}, [url])\n\tuseEffect(() => {\n\t\tloadChannelFromDB()\n\t}, [])\n\tuseEffect(() => {\n\t\tsocket.on('some-one-add-channel', (newChannel) => {\n\t\t\t// setListchannel([...listchannel, newChannel])\n\n\t\t\tsetListchannel((state) => [...state, newChannel])\n\t\t})\n\t}, [])\n\tuseEffect(() => {\n\t\tsocket.on('some-one-add-topic', (send_topic) => {\n\t\t\tsetListtopic((state) => [...state, send_topic])\n\t\t})\n\t}, [])\n\tuseEffect(() => {\n\t\tsocket.on('some-one-add-reply', (newReply) => {\n\t\t\tsetListreply((state) => [...state, newReply])\n\t\t})\n\t}, [])\n\tuseEffect(() => {\n\t\tsocket.on('some-one-update-reply-array', ({ newReply, _id_topic }) => {\n\t\t\tlet newlisttopic = []\n\t\t\tsetListtopic((state) => {\n\t\t\t\tconsole.log(state)\n\t\t\t\tfor (let i = 0; i < state.length; ++i) {\n\t\t\t\t\tlet topic = state[i]\n\t\t\t\t\tif (topic._id === _id_topic) {\n\t\t\t\t\t\ttopic.reply = newReply\n\t\t\t\t\t}\n\t\t\t\t\tnewlisttopic.push(topic)\n\t\t\t\t}\n\t\t\t\tconsole.log(newlisttopic)\n\t\t\t\treturn newlisttopic\n\t\t\t})\n\t\t})\n\t}, [])\n\t//\n\n\tconst handleAddChanel = async () => {\n\t\tsetOpenDialog(false)\n\t\tsetOpenBackDrop(true)\n\t\tawait FETCH_POST(CREATE_CHANNEL, { name: channel_name })\n\t\t\t.then((res) => {\n\t\t\t\tsetOpenBackDrop(false)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.then(\n\t\t\t\t(rs) => {\n\t\t\t\t\tif (rs.success) {\n\t\t\t\t\t\t// setIsAddSuccess(true)\n\t\t\t\t\t}\n\t\t\t\t\tif (rs.err) {\n\t\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\t}\n\t\t\t\t\t// setOpenSnack(true)\n\t\t\t\t},\n\t\t\t\t(err) => {\n\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t},\n\t\t\t)\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\t\tsetChanel_name('')\n\t}\n\tconst handleAddPost = async (attachImageUrl) => {\n\t\tif (!current_channel) {\n\t\t\tsetIsAddSuccess(false)\n\t\t\tsetOpenSnack(true)\n\t\t\treturn\n\t\t}\n\t\tsetOpenBackDrop(true)\n\t\tlet list_image = null\n\t\tawait FETCH_POST(UPLOAD_TO_CLOUD, {\n\t\t\timage: attachImageUrl,\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((rs) => {\n\t\t\t\tif (rs.list_image) {\n\t\t\t\t\tlist_image = rs.list_image\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif (rs.err) {\n\t\t\t\t\tsetOpenBackDrop(false)\n\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tsetOpenBackDrop(false)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\t\tif (list_image === null) return\n\t\tawait FETCH_POST(CREATE_TOPIC, {\n\t\t\tuser: username,\n\t\t\tchannel: current_channel,\n\t\t\tcontent: topic_content !== '' ? topic_content : topic_content_2,\n\t\t\tlist_image,\n\t\t})\n\t\t\t.then((res) => {\n\t\t\t\tsetOpenBackDrop(false)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.then((rs) => {\n\t\t\t\tif (rs.newTopic) {\n\t\t\t\t\t// setIsAddSuccess(true)\n\t\t\t\t\t// setOpenSnack(true)\n\t\t\t\t}\n\t\t\t\tif (rs.err) {\n\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\n\t\tsetOpenDialogTopic(false)\n\t\tsetTopic_content('')\n\t}\n\tconst handleJoinChannel = async (channelName) => {\n\t\t//if before join another topic\n\t\tsetIsOpenThread(false)\n\t\tsetListreply([])\n\t\tsetListtopic([])\n\t\tif (current_channel !== '') {\n\t\t\tsocket.emit('leave-channel', current_channel)\n\t\t}\n\n\t\t// reset list reply\n\t\tsetListreply([])\n\n\t\t// animation channel bar\n\t\tconst fakeListChannel = []\n\t\tfor (let i = 0; i < listchannel.length; ++i) {\n\t\t\tif (listchannel[i].name === channelName) {\n\t\t\t\tfakeListChannel.push({\n\t\t\t\t\tname: channelName,\n\t\t\t\t\tisJoin: true,\n\t\t\t\t})\n\t\t\t\tsetCurrent_channel(channelName)\n\t\t\t} else {\n\t\t\t\tfakeListChannel.push({\n\t\t\t\t\tname: listchannel[i].name,\n\t\t\t\t\tisJoin: false,\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tsetListchannel(fakeListChannel)\n\t\t// setOpenBackDrop(true)\n\t\tsetListtopic([])\n\t\t//load data post\n\t\tawait FETCH_POST(GET_LIST_TOPIC, { channelName })\n\t\t\t.then((res) => {\n\t\t\t\t// setOpenBackDrop(false)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.then((rs) => {\n\t\t\t\tsocket.emit('join-channel', channelName)\n\t\t\t\tsetListtopic(rs.listTopic)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\t}\n\tconst handleClickTopic = async (_id_topic) => {\n\t\tif (idtopic !== '') {\n\t\t\tsocket.emit('leave-topic', idtopic)\n\t\t}\n\t\tsetCurrent_topic(_id_topic)\n\t\t// setOpenBackDrop(true)\n\t\tawait FETCH_POST(GET_LIST_REPLY, { _id_topic })\n\t\t\t.then((res) => {\n\t\t\t\t// setOpenBackDrop(false)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.then((rs) => {\n\t\t\t\tsocket.emit('join-topic', _id_topic)\n\t\t\t\tsetIdtopic(_id_topic)\n\t\t\t\tsetIsOpenThread(true)\n\t\t\t\tsetListreply(rs.listreply)\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\t}\n\tconst handleAddReply = async () => {\n\t\t// setOpenBackDrop(true)\n\t\t// add reply\n\t\tlet id_reply = null\n\t\tawait FETCH_POST(ADD_REPLY, {\n\t\t\tusername,\n\t\t\t_id_topic: idtopic,\n\t\t\tcontent: reply_content,\n\t\t})\n\t\t\t.then((res) => {\n\t\t\t\t// setOpenBackDrop(false)\n\t\t\t\treturn res.json()\n\t\t\t})\n\t\t\t.then((rs) => {\n\t\t\t\tif (rs.newReply) {\n\t\t\t\t\tid_reply = rs.newReply._id\n\t\t\t\t\t// setIsAddSuccess(true)\n\t\t\t\t\t// setOpenSnack(true)\n\t\t\t\t}\n\t\t\t\tif (rs.err) {\n\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\tsetOpenSnack(true)\n\t\t\t})\n\t\t//add reply for topic\n\t\tif (id_reply !== null) {\n\t\t\tawait FETCH_POST(PUSH_REPLY_TO_TOPIC, {\n\t\t\t\tid_reply,\n\t\t\t\t_id_topic: idtopic,\n\t\t\t})\n\t\t\t\t.then((res) => res.json())\n\t\t\t\t.then((rs) => {\n\t\t\t\t\t// let newReply = rs.reply\n\t\t\t\t\t// socket.emit('update-reply-array', {\n\t\t\t\t\t// \tnewReply,\n\t\t\t\t\t// \t_id_topic: idtopic,\n\t\t\t\t\t// })\n\t\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\t\tconsole.log(error)\n\t\t\t\t})\n\t\t}\n\t}\n\t//\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<div className='main'>\n\t\t\t\t<div className='nav-bar'></div>\n\t\t\t\t<div className='chanel-content'>\n\t\t\t\t\t<Channel\n\t\t\t\t\t\thandleClickOpen={() => setOpenDialog(true)}\n\t\t\t\t\t\tlistchannel={listchannel}\n\t\t\t\t\t\thandleJoinChannel={handleJoinChannel}\n\t\t\t\t\t/>\n\t\t\t\t\t<div className='content'>\n\t\t\t\t\t\t<Status\n\t\t\t\t\t\t\tnumberPost={listtopic.length}\n\t\t\t\t\t\t\tchannelName={current_channel}\n\t\t\t\t\t\t\topenAddTopicForm={() => {\n\t\t\t\t\t\t\t\tif (current_channel !== '')\n\t\t\t\t\t\t\t\t\tsetOpenDialogTopic(true)\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<div className='down'>\n\t\t\t\t\t\t\t<Topic\n\t\t\t\t\t\t\t\tlisttopic={listtopic}\n\t\t\t\t\t\t\t\thandleClickTopic={handleClickTopic}\n\t\t\t\t\t\t\t\tisOpenThread={isOpenThread}\n\t\t\t\t\t\t\t\ttopic_content_2={topic_content_2}\n\t\t\t\t\t\t\t\tsetTopic_content_2={setTopic_content_2}\n\t\t\t\t\t\t\t\thandleAddPost={handleAddPost}\n\t\t\t\t\t\t\t\tsetOpenBackDrop={setOpenBackDrop}\n\t\t\t\t\t\t\t\tsetOpenSnack={setOpenSnack}\n\t\t\t\t\t\t\t\tsetIsAddSuccess={setIsAddSuccess}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<Thread\n\t\t\t\t\t\t\t\tusername={username}\n\t\t\t\t\t\t\t\thandleAddReply={() => {\n\t\t\t\t\t\t\t\t\tif (current_topic === '') {\n\t\t\t\t\t\t\t\t\t\tsetIsAddSuccess(false)\n\t\t\t\t\t\t\t\t\t\tsetOpenSnack(true)\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\thandleAddReply()\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tsetReply_content('')\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\treply_content={reply_content}\n\t\t\t\t\t\t\t\tsetReply_content={setReply_content}\n\t\t\t\t\t\t\t\tlistreply={listreply}\n\t\t\t\t\t\t\t\tcloseThread={() => {\n\t\t\t\t\t\t\t\t\tsetIsOpenThread(false)\n\t\t\t\t\t\t\t\t\tsetListreply([])\n\t\t\t\t\t\t\t\t\tsetIdtopic('')\n\t\t\t\t\t\t\t\t\tsocket.emit('leave-topic', idtopic)\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tisOpenThread={isOpenThread}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<Dialog\n\t\t\t\topen={openDialogTopic}\n\t\t\t\tonClose={() => setOpenDialogTopic(false)}\n\t\t\t\taria-labelledby='form-dialog-title'\n\t\t\t>\n\t\t\t\t<DialogTitle id='form-dialog-title'>Add Post</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin='dense'\n\t\t\t\t\t\tid='topic'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvalue={topic_content}\n\t\t\t\t\t\tonChange={(e) => setTopic_content(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetOpenDialogTopic(false)\n\t\t\t\t\t\t\tsetTopic_content('')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={() => handleAddPost()} color='primary'>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<Dialog\n\t\t\t\topen={openDialog}\n\t\t\t\tonClose={() => setOpenDialog(false)}\n\t\t\t\taria-labelledby='form-dialog-title'\n\t\t\t>\n\t\t\t\t<DialogTitle id='form-dialog-title'>Add Channel</DialogTitle>\n\t\t\t\t<DialogContent>\n\t\t\t\t\t<TextField\n\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\tmargin='dense'\n\t\t\t\t\t\tid='channel'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\tvalue={channel_name}\n\t\t\t\t\t\tonChange={(e) => setChanel_name(e.target.value)}\n\t\t\t\t\t/>\n\t\t\t\t</DialogContent>\n\t\t\t\t<DialogActions>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetOpenDialog(false)\n\t\t\t\t\t\t\tsetChanel_name('')\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t>\n\t\t\t\t\t\tCancel\n\t\t\t\t\t</Button>\n\t\t\t\t\t<Button onClick={() => handleAddChanel()} color='primary'>\n\t\t\t\t\t\tAdd\n\t\t\t\t\t</Button>\n\t\t\t\t</DialogActions>\n\t\t\t</Dialog>\n\t\t\t<Snackbar\n\t\t\t\topen={openSnack}\n\t\t\t\tautoHideDuration={6000}\n\t\t\t\tonClose={() => setOpenSnack(false)}\n\t\t\t>\n\t\t\t\t{isAddSuccess ? (\n\t\t\t\t\t<Alert\n\t\t\t\t\t\tonClose={() => setOpenSnack(false)}\n\t\t\t\t\t\tseverity='success'\n\t\t\t\t\t>\n\t\t\t\t\t\tAdd successful!\n\t\t\t\t\t</Alert>\n\t\t\t\t) : (\n\t\t\t\t\t<Alert severity='error'>Some error just happens!</Alert>\n\t\t\t\t)}\n\t\t\t</Snackbar>\n\t\t\t<Backdrop\n\t\t\t\tclassName={classes.backdrop}\n\t\t\t\topen={openBackDrop}\n\t\t\t\tonClick={() => setOpenBackDrop(false)}\n\t\t\t>\n\t\t\t\t<CircularProgress color='inherit' />\n\t\t\t</Backdrop>\n\t\t</div>\n\t)\n}\n\nexport default Index\n","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Channel/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Status/Index.js",[],["79","80"],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Topic/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/TopicPost/Index.js",["81","82"],"import React, { useEffect, useState, useCallback } from 'react'\nimport Avatar from '@material-ui/core/Avatar'\nimport AvatarGroup from '@material-ui/lab/AvatarGroup'\n\nimport { FETCH_POST } from '../../API/index'\nimport { GET_IMAGE, GET_REPLY_INFO } from '../../Config/Index'\nimport { showDate } from '../../Config/refractorDate'\nconst Index = (props) => {\n\tconst { topic, handleClickTopic } = props\n\tconst [img, setImg] = useState('')\n\tconst [listReplyImg, setListReplyImg] = useState([])\n\tuseEffect(() => {\n\t\tloadImage()\n\t}, [])\n\n\tuseEffect(() => {\n\t\tloadImgDate()\n\t}, [])\n\tconst loadImage = useCallback(async () => {\n\t\tawait FETCH_POST(GET_IMAGE, { username: topic.user })\n\t\t\t.then((res) => res.json())\n\t\t\t.then((rs) => {\n\t\t\t\tif (rs.img) {\n\t\t\t\t\tsetImg(rs.img)\n\t\t\t\t}\n\t\t\t\tif (rs.err) {\n\t\t\t\t\tconsole.log('err')\n\t\t\t\t}\n\t\t\t})\n\t}, [topic])\n\tconst loadImgDate = async () => {\n\t\tawait FETCH_POST(GET_REPLY_INFO, {\n\t\t\ttopic_id: topic._id,\n\t\t})\n\t\t\t.then((res) => res.json())\n\t\t\t.then((rs) => {\n\t\t\t\t// rs.refactorlistImgDate array\n\t\t\t\tsetListReplyImg(rs.refactorlistImgDate)\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log(err)\n\t\t\t})\n\t}\n\tconst display_sent_image = () => {\n\t\treturn topic.image.map((ele) => {\n\t\t\treturn (\n\t\t\t\t<div className='image-sent-item'>\n\t\t\t\t\t<img src={ele} alt='' />\n\t\t\t\t</div>\n\t\t\t)\n\t\t})\n\t}\n\treturn (\n\t\t<div className='post post-left'>\n\t\t\t<div className='image-tab'>\n\t\t\t\t<img src={img} alt='' />\n\t\t\t</div>\n\t\t\t<div className='content-tab'>\n\t\t\t\t<div className='status-content'>\n\t\t\t\t\t<p className='user-name'>{topic.user}</p>\n\t\t\t\t\t<span className='time-sent'>{showDate(topic.date)}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='user-content'>\n\t\t\t\t\t<span className='text'>{topic.content}</span>\n\t\t\t\t\t<div className='image-sent'>{display_sent_image()}</div>\n\t\t\t\t</div>\n\t\t\t\t{topic.reply.length > 0 ? (\n\t\t\t\t\t<div className='response'>\n\t\t\t\t\t\t<AvatarGroup max={4}>\n\t\t\t\t\t\t\t{listReplyImg.map((ele) => {\n\t\t\t\t\t\t\t\treturn <Avatar alt='Remy Sharp' src={ele.img} />\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</AvatarGroup>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref\n\t\t\t\t\t\t\tclassName='number-reply'\n\t\t\t\t\t\t\tonClick={() => handleClickTopic(topic._id)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t{topic.reply.length} replies\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<div className='last-reply'>\n\t\t\t\t\t\t\t{listReplyImg.length === 0 ? (\n\t\t\t\t\t\t\t\t<span>No reply recored </span>\n\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\tLast reply :{showDate(listReplyImg[0].date)}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t) : (\n\t\t\t\t\t<div class='response'>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref\n\t\t\t\t\t\t\tclassName='number-reply'\n\t\t\t\t\t\t\tonClick={() => handleClickTopic(topic._id)}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t0 replies\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Index\n","/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Main-Thread/Index.js",[],["83","84"],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Sub-Thread/Index.js",["85"],"import React, { useEffect, useState } from 'react'\nimport { FETCH_POST } from '../../API/index'\nimport { GET_IMAGE } from '../../Config/Index'\nimport { showDate } from '../../Config/refractorDate'\nconst Index = (props) => {\n\tconst { reply } = props\n\tconst [img, setImg] = useState('')\n\tconst loadImage = async () => {\n\t\tawait FETCH_POST(GET_IMAGE, { username: reply.user })\n\t\t\t.then((res) => res.json())\n\t\t\t.then((rs) => {\n\t\t\t\tif (rs.img) {\n\t\t\t\t\tsetImg(rs.img)\n\t\t\t\t}\n\t\t\t\tif (rs.err) {\n\t\t\t\t\tconsole.log('err')\n\t\t\t\t}\n\t\t\t})\n\t}\n\tuseEffect(() => {\n\t\tloadImage()\n\t}, [])\n\treturn (\n\t\t<div className='post post-right'>\n\t\t\t<div className='image-tab'>\n\t\t\t\t<img src={img} alt='' />\n\t\t\t</div>\n\t\t\t<div className='content-tab'>\n\t\t\t\t<div className='status-content'>\n\t\t\t\t\t<p className='user-name'>{reply.user}</p>\n\t\t\t\t\t<span className='time-sent'>{showDate(reply.date)}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className='user-content'>\n\t\t\t\t\t<span className='text'>{reply.content}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Index\n",["86","87"],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/Sub-Channel/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Config/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/API/index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Components/WrapMain/Index.js",[],"/home/captainspring/Desktop/code/WebSocket/myproject2/clientslack/src/Config/refractorDate.js",[],{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","replacedBy":"91"},{"ruleId":"88","replacedBy":"92"},{"ruleId":"90","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":79,"column":14,"nodeType":"96","messageId":"97","endLine":79,"endColumn":20},{"ruleId":"88","replacedBy":"98"},{"ruleId":"90","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":14,"column":5,"nodeType":"102","endLine":14,"endColumn":7,"suggestions":"103"},{"ruleId":"100","severity":1,"message":"104","line":18,"column":5,"nodeType":"102","endLine":18,"endColumn":7,"suggestions":"105"},{"ruleId":"88","replacedBy":"106"},{"ruleId":"90","replacedBy":"107"},{"ruleId":"100","severity":1,"message":"101","line":22,"column":5,"nodeType":"102","endLine":22,"endColumn":7,"suggestions":"108"},{"ruleId":"88","replacedBy":"109"},{"ruleId":"90","replacedBy":"110"},"no-native-reassign",["111"],"no-negated-in-lhs",["112"],["111"],["112"],"no-unused-vars","'setUrl' is assigned a value but never used.","Identifier","unusedVar",["111"],["112"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadImage'. Either include it or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has a missing dependency: 'loadImgDate'. Either include it or remove the dependency array.",["114"],["111"],["112"],["115"],["111"],["112"],"no-global-assign","no-unsafe-negation",{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"116","fix":"120"},"Update the dependencies array to be: [loadImage]",{"range":"121","text":"122"},"Update the dependencies array to be: [loadImgDate]",{"range":"123","text":"124"},{"range":"125","text":"122"},[525,527],"[loadImage]",[569,571],"[loadImgDate]",[561,563]]